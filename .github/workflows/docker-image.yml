name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on: [push]

jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Check out repository code
        uses: actions/checkout@v4

      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}                              

      - name: Set build time and tag
        id: set_tag
        run: |
          BUILD_TIME=$(date -u +'%Y-%m-%dT%H-%M-%SZ')
          TAG="RELEASE.${BUILD_TIME}"
          echo "build_time=${BUILD_TIME}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build -t suposce/ids:${{ steps.set_tag.outputs.tag }} .                      

      - name: Log in to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin                              

      - name: Tag and push Docker image
        run: |
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')
          TAG=${{ steps.set_tag.outputs.tag }}

          docker tag suposce/ids:${TAG} suposce/ids:${TIMESTAMP}
          docker push suposce/ids:${TIMESTAMP}      

          docker tag suposce/ids:${TAG} suposce/ids:${TAG}
          docker push suposce/ids:${TAG} 

          docker rmi suposce/ids:${TIMESTAMP}
          docker rmi suposce/ids:${TAG}                    

      - name: Clean up
        run: |
          docker builder prune --all --force
          docker volume prune -f
          docker network prune -f
          docker system df
          docker rmi $(docker images --filter "dangling=true" -q) || true                    

      - run: echo "üçè This job's status is ${{ job.status }}."